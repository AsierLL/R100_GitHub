/**
 * \file sha2.h
 *
 * \brief SHA-224 and SHA-256 cryptographic hash function
 *
 *  Copyright (C) 2006-2010, Brainspark B.V.
 *
 *  All rights reserved.
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License along
 *  with this program; if not, write to the Free Software Foundation, Inc.,
 *  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
#ifndef SHA2_H
#define SHA2_H

#include <string.h>

#if defined(SSH_2_M)
	#define SCOPE_SSH /**/
#else
	#define SCOPE_SSH extern
#endif

#define ERR_SHA2_FILE_IO_ERROR                -0x0078  /**< Read/write error in file. */

/**
 * \brief          SHA-256 context structure
 */
typedef struct
{
	unsigned long total[2];     /*!< number of bytes processed  */
	unsigned long state[8];     /*!< intermediate digest state  */
	unsigned char buffer[64];   /*!< data block being processed */

	unsigned char ipad[64];     /*!< HMAC: inner padding        */
	unsigned char opad[64];     /*!< HMAC: outer padding        */
	int is224;                  /*!< 0 => SHA-256, else SHA-224 */
}
sha2_context;

/*
 * FIPS-180-2 test vectors
 */
/*static unsigned char sha2_test_buf[3][57] =
{
	{ "abc" },
	{ "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq" },
	{ "" }
};*/

static const int sha2_test_buflen[3] =
{
	3, 56, 1000
};

static const unsigned char sha2_test_sum[6][32] =
{
	/*
	 * SHA-224 test vectors
	 */
	{
		0x23, 0x09, 0x7D, 0x22, 0x34, 0x05, 0xD8, 0x22,
		0x86, 0x42, 0xA4, 0x77, 0xBD, 0xA2, 0x55, 0xB3,
		0x2A, 0xAD, 0xBC, 0xE4, 0xBD, 0xA0, 0xB3, 0xF7,
		0xE3, 0x6C, 0x9D, 0xA7
	},
	{
		0x75, 0x38, 0x8B, 0x16, 0x51, 0x27, 0x76, 0xCC,
		0x5D, 0xBA, 0x5D, 0xA1, 0xFD, 0x89, 0x01, 0x50,
		0xB0, 0xC6, 0x45, 0x5C, 0xB4, 0xF5, 0x8B, 0x19,
		0x52, 0x52, 0x25, 0x25
	},
	{
		0x20, 0x79, 0x46, 0x55, 0x98, 0x0C, 0x91, 0xD8,
		0xBB, 0xB4, 0xC1, 0xEA, 0x97, 0x61, 0x8A, 0x4B,
		0xF0, 0x3F, 0x42, 0x58, 0x19, 0x48, 0xB2, 0xEE,
		0x4E, 0xE7, 0xAD, 0x67
	},

	/*
	 * SHA-256 test vectors
	 */
	{
		0xBA, 0x78, 0x16, 0xBF, 0x8F, 0x01, 0xCF, 0xEA,
		0x41, 0x41, 0x40, 0xDE, 0x5D, 0xAE, 0x22, 0x23,
		0xB0, 0x03, 0x61, 0xA3, 0x96, 0x17, 0x7A, 0x9C,
		0xB4, 0x10, 0xFF, 0x61, 0xF2, 0x00, 0x15, 0xAD
	},
	{
		0x24, 0x8D, 0x6A, 0x61, 0xD2, 0x06, 0x38, 0xB8,
		0xE5, 0xC0, 0x26, 0x93, 0x0C, 0x3E, 0x60, 0x39,
		0xA3, 0x3C, 0xE4, 0x59, 0x64, 0xFF, 0x21, 0x67,
		0xF6, 0xEC, 0xED, 0xD4, 0x19, 0xDB, 0x06, 0xC1
	},
	{
		0xCD, 0xC7, 0x6E, 0x5C, 0x99, 0x14, 0xFB, 0x92,
		0x81, 0xA1, 0xC7, 0xE2, 0x84, 0xD7, 0x3E, 0x67,
		0xF1, 0x80, 0x9A, 0x48, 0xA4, 0x97, 0x20, 0x0E,
		0x04, 0x6D, 0x39, 0xCC, 0xC7, 0x11, 0x2C, 0xD0
	}
};

/*
 * RFC 4231 test vectors
 */
/*static unsigned char sha2_hmac_test_key[7][26] =
{
	{
		"\x0B\x0B\x0B\x0B\x0B\x0B\x0B\x0B\x0B\x0B\x0B\x0B\x0B\x0B\x0B\x0B"
		"\x0B\x0B\x0B\x0B"
	},
	{ "Jefe" },
	{
		"\xAA\xAA\xAA\xAA\xAA\xAA\xAA\xAA\xAA\xAA\xAA\xAA\xAA\xAA\xAA\xAA"
		"\xAA\xAA\xAA\xAA"
	},
	{
		"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10"
		"\x11\x12\x13\x14\x15\x16\x17\x18\x19"
	},
	{
		"\x0C\x0C\x0C\x0C\x0C\x0C\x0C\x0C\x0C\x0C\x0C\x0C\x0C\x0C\x0C\x0C"
		"\x0C\x0C\x0C\x0C"
	},
	{ "" }, // 0xAA 131 times
	{ "" }
};*/

static const int sha2_hmac_test_keylen[7] =
{
	20, 4, 20, 25, 20, 131, 131
};

/*static unsigned char sha2_hmac_test_buf[7][153] =
{
	{ "Hi There" },
	{ "what do ya want for nothing?" },
	{
		"\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD"
		"\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD"
		"\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD"
		"\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD"
		"\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD"
	},
	{
		"\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD"
		"\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD"
		"\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD"
		"\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD"
		"\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD"
	},
	{ "Test With Truncation" },
	{ "Test Using Larger Than Block-Size Key - Hash Key First" },
	{
		"This is a test using a larger than block-size key "
		"and a larger than block-size data. The key needs to "
		"be hashed before being used by the HMAC algorithm."
	}
};*/

static const int sha2_hmac_test_buflen[7] =
{
	8, 28, 50, 50, 20, 54, 152
};

static const unsigned char sha2_hmac_test_sum[14][32] =
{
	/*
	 * HMAC-SHA-224 test vectors
	 */
	{
		0x89, 0x6F, 0xB1, 0x12, 0x8A, 0xBB, 0xDF, 0x19,
		0x68, 0x32, 0x10, 0x7C, 0xD4, 0x9D, 0xF3, 0x3F,
		0x47, 0xB4, 0xB1, 0x16, 0x99, 0x12, 0xBA, 0x4F,
		0x53, 0x68, 0x4B, 0x22
	},
	{
		0xA3, 0x0E, 0x01, 0x09, 0x8B, 0xC6, 0xDB, 0xBF,
		0x45, 0x69, 0x0F, 0x3A, 0x7E, 0x9E, 0x6D, 0x0F,
		0x8B, 0xBE, 0xA2, 0xA3, 0x9E, 0x61, 0x48, 0x00,
		0x8F, 0xD0, 0x5E, 0x44
	},
	{
		0x7F, 0xB3, 0xCB, 0x35, 0x88, 0xC6, 0xC1, 0xF6,
		0xFF, 0xA9, 0x69, 0x4D, 0x7D, 0x6A, 0xD2, 0x64,
		0x93, 0x65, 0xB0, 0xC1, 0xF6, 0x5D, 0x69, 0xD1,
		0xEC, 0x83, 0x33, 0xEA
	},
	{
		0x6C, 0x11, 0x50, 0x68, 0x74, 0x01, 0x3C, 0xAC,
		0x6A, 0x2A, 0xBC, 0x1B, 0xB3, 0x82, 0x62, 0x7C,
		0xEC, 0x6A, 0x90, 0xD8, 0x6E, 0xFC, 0x01, 0x2D,
		0xE7, 0xAF, 0xEC, 0x5A
	},
	{
		0x0E, 0x2A, 0xEA, 0x68, 0xA9, 0x0C, 0x8D, 0x37,
		0xC9, 0x88, 0xBC, 0xDB, 0x9F, 0xCA, 0x6F, 0xA8
	},
	{
		0x95, 0xE9, 0xA0, 0xDB, 0x96, 0x20, 0x95, 0xAD,
		0xAE, 0xBE, 0x9B, 0x2D, 0x6F, 0x0D, 0xBC, 0xE2,
		0xD4, 0x99, 0xF1, 0x12, 0xF2, 0xD2, 0xB7, 0x27,
		0x3F, 0xA6, 0x87, 0x0E
	},
	{
		0x3A, 0x85, 0x41, 0x66, 0xAC, 0x5D, 0x9F, 0x02,
		0x3F, 0x54, 0xD5, 0x17, 0xD0, 0xB3, 0x9D, 0xBD,
		0x94, 0x67, 0x70, 0xDB, 0x9C, 0x2B, 0x95, 0xC9,
		0xF6, 0xF5, 0x65, 0xD1
	},

	/*
	 * HMAC-SHA-256 test vectors
	 */
	{
		0xB0, 0x34, 0x4C, 0x61, 0xD8, 0xDB, 0x38, 0x53,
		0x5C, 0xA8, 0xAF, 0xCE, 0xAF, 0x0B, 0xF1, 0x2B,
		0x88, 0x1D, 0xC2, 0x00, 0xC9, 0x83, 0x3D, 0xA7,
		0x26, 0xE9, 0x37, 0x6C, 0x2E, 0x32, 0xCF, 0xF7
	},
	{
		0x5B, 0xDC, 0xC1, 0x46, 0xBF, 0x60, 0x75, 0x4E,
		0x6A, 0x04, 0x24, 0x26, 0x08, 0x95, 0x75, 0xC7,
		0x5A, 0x00, 0x3F, 0x08, 0x9D, 0x27, 0x39, 0x83,
		0x9D, 0xEC, 0x58, 0xB9, 0x64, 0xEC, 0x38, 0x43
	},
	{
		0x77, 0x3E, 0xA9, 0x1E, 0x36, 0x80, 0x0E, 0x46,
		0x85, 0x4D, 0xB8, 0xEB, 0xD0, 0x91, 0x81, 0xA7,
		0x29, 0x59, 0x09, 0x8B, 0x3E, 0xF8, 0xC1, 0x22,
		0xD9, 0x63, 0x55, 0x14, 0xCE, 0xD5, 0x65, 0xFE
	},
	{
		0x82, 0x55, 0x8A, 0x38, 0x9A, 0x44, 0x3C, 0x0E,
		0xA4, 0xCC, 0x81, 0x98, 0x99, 0xF2, 0x08, 0x3A,
		0x85, 0xF0, 0xFA, 0xA3, 0xE5, 0x78, 0xF8, 0x07,
		0x7A, 0x2E, 0x3F, 0xF4, 0x67, 0x29, 0x66, 0x5B
	},
	{
		0xA3, 0xB6, 0x16, 0x74, 0x73, 0x10, 0x0E, 0xE0,
		0x6E, 0x0C, 0x79, 0x6C, 0x29, 0x55, 0x55, 0x2B
	},
	{
		0x60, 0xE4, 0x31, 0x59, 0x1E, 0xE0, 0xB6, 0x7F,
		0x0D, 0x8A, 0x26, 0xAA, 0xCB, 0xF5, 0xB7, 0x7F,
		0x8E, 0x0B, 0xC6, 0x21, 0x37, 0x28, 0xC5, 0x14,
		0x05, 0x46, 0x04, 0x0F, 0x0E, 0xE3, 0x7F, 0x54
	},
	{
		0x9B, 0x09, 0xFF, 0xA7, 0x1B, 0x94, 0x2F, 0xCB,
		0x27, 0x63, 0x5F, 0xBC, 0xD5, 0xB0, 0xE9, 0x44,
		0xBF, 0xDC, 0x63, 0x64, 0x4F, 0x07, 0x13, 0x93,
		0x8A, 0x7F, 0x51, 0x53, 0x5C, 0x3A, 0x35, 0xE2
	}
};

#ifdef __cplusplus
extern "C" {
#endif

/**
 * \brief          SHA-256 context setup
 *
 * \param ctx      context to be initialized
 * \param is224    0 = use SHA256, 1 = use SHA224
 */
SCOPE_SSH void sha2_starts( sha2_context *ctx, int is224 );

/**
 * \brief          SHA-256 process buffer
 *
 * \param ctx      SHA-256 context
 * \param input    buffer holding the  data
 * \param ilen     length of the input data
 */
SCOPE_SSH void sha2_update( sha2_context *ctx, const unsigned char *input, size_t ilen );

/**
 * \brief          SHA-256 final digest
 *
 * \param ctx      SHA-256 context
 * \param output   SHA-224/256 checksum result
 */
SCOPE_SSH void sha2_finish( sha2_context *ctx, unsigned char output[32] );

/**
 * \brief          Output = SHA-256( input buffer )
 *
 * \param input    buffer holding the  data
 * \param ilen     length of the input data
 * \param output   SHA-224/256 checksum result
 * \param is224    0 = use SHA256, 1 = use SHA224
 */
SCOPE_SSH void sha2( const unsigned char *input, size_t ilen,
                     unsigned char output[32], int is224 );

/**
 * \brief          Output = SHA-256( file contents )
 *
 * \param path     input file name
 * \param output   SHA-224/256 checksum result
 * \param is224    0 = use SHA256, 1 = use SHA224
 *
 * \return         0 if successful, or ERR_SHA2_FILE_IO_ERROR
 */
//SCOPE_SSH int sha2_file( const char *path, unsigned char output[32], int is224 );

/**
 * \brief          SHA-256 HMAC context setup
 *
 * \param ctx      HMAC context to be initialized
 * \param key      HMAC secret key
 * \param keylen   length of the HMAC key
 * \param is224    0 = use SHA256, 1 = use SHA224
 */
SCOPE_SSH void sha2_hmac_starts( sha2_context *ctx, const unsigned char *key, size_t keylen,
                                 int is224 );

/**
 * \brief          SHA-256 HMAC process buffer
 *
 * \param ctx      HMAC context
 * \param input    buffer holding the  data
 * \param ilen     length of the input data
 */
SCOPE_SSH void sha2_hmac_update( sha2_context *ctx, const unsigned char *input, size_t ilen );

/**
 * \brief          SHA-256 HMAC final digest
 *
 * \param ctx      HMAC context
 * \param output   SHA-224/256 HMAC checksum result
 */
SCOPE_SSH void sha2_hmac_finish( sha2_context *ctx, unsigned char output[32] );

/**
 * \brief          SHA-256 HMAC context reset
 *
 * \param ctx      HMAC context to be reset
 */
SCOPE_SSH void sha2_hmac_reset( sha2_context *ctx );

/**
 * \brief          Output = HMAC-SHA-256( hmac key, input buffer )
 *
 * \param key      HMAC secret key
 * \param keylen   length of the HMAC key
 * \param input    buffer holding the  data
 * \param ilen     length of the input data
 * \param output   HMAC-SHA-224/256 result
 * \param is224    0 = use SHA256, 1 = use SHA224
 */
SCOPE_SSH void sha2_hmac( const unsigned char *key, size_t keylen,
                          const unsigned char *input, size_t ilen,
                          unsigned char output[32], int is224 );

/**
 * \brief          Checkup routine
 *
 * \return         0 if successful, or 1 if the test failed
 */
//SCOPE_SSH int sha2_self_test( int verbose );

#ifdef __cplusplus
}
#endif

#endif /* sha2.h */
